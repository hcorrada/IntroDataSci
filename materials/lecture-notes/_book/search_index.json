[
["eda-handling-missing-data.html", "21 EDA: Handling Missing Data 21.1 Mechanisms of missing data 21.2 Handling missing data 21.3 Implications of imputation", " 21 EDA: Handling Missing Data We can now move on to a very important aspect of data preparation and transformation: how to deal with missing data? By missing data we mean values that are unrecorded, unknown or unspecified in a dataset. We saw an example of this when we looked at the tidy unit. Here is the tidy weather dataset again: ## # A tibble: 22 x 35 ## id year month element d1 d2 d3 d4 d5 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MX17004 2010 1 tmax NA NA NA NA NA ## 2 MX17004 2010 1 tmin NA NA NA NA NA ## 3 MX17004 2010 2 tmax NA 27.3 24.1 NA NA ## 4 MX17004 2010 2 tmin NA 14.4 14.4 NA NA ## 5 MX17004 2010 3 tmax NA NA NA NA 32.1 ## 6 MX17004 2010 3 tmin NA NA NA NA 14.2 ## 7 MX17004 2010 4 tmax NA NA NA NA NA ## 8 MX17004 2010 4 tmin NA NA NA NA NA ## 9 MX17004 2010 5 tmax NA NA NA NA NA ## 10 MX17004 2010 5 tmin NA NA NA NA NA ## # … with 12 more rows, and 26 more variables: d6 &lt;dbl&gt;, ## # d7 &lt;dbl&gt;, d8 &lt;dbl&gt;, d9 &lt;lgl&gt;, d10 &lt;dbl&gt;, d11 &lt;dbl&gt;, ## # d12 &lt;lgl&gt;, d13 &lt;dbl&gt;, d14 &lt;dbl&gt;, d15 &lt;dbl&gt;, d16 &lt;dbl&gt;, ## # d17 &lt;dbl&gt;, d18 &lt;lgl&gt;, d19 &lt;lgl&gt;, d20 &lt;lgl&gt;, d21 &lt;lgl&gt;, ## # d22 &lt;lgl&gt;, d23 &lt;dbl&gt;, d24 &lt;lgl&gt;, d25 &lt;dbl&gt;, d26 &lt;dbl&gt;, ## # d27 &lt;dbl&gt;, d28 &lt;dbl&gt;, d29 &lt;dbl&gt;, d30 &lt;dbl&gt;, d31 &lt;dbl&gt; And the result of tidying this dataset: tidy_weather &lt;- weather %&gt;% gather(day, temp, d1:d31) %&gt;% spread(element, temp) tidy_weather ## # A tibble: 341 x 6 ## id year month day tmax tmin ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MX17004 2010 1 d1 NA NA ## 2 MX17004 2010 1 d10 NA NA ## 3 MX17004 2010 1 d11 NA NA ## 4 MX17004 2010 1 d12 NA NA ## 5 MX17004 2010 1 d13 NA NA ## 6 MX17004 2010 1 d14 NA NA ## 7 MX17004 2010 1 d15 NA NA ## 8 MX17004 2010 1 d16 NA NA ## 9 MX17004 2010 1 d17 NA NA ## 10 MX17004 2010 1 d18 NA NA ## # … with 331 more rows In this dataset, temperature observations coded as NA are considered missing. Now, we can imagine a few reasons why measurements would be missing in this dataset: (a) the measurement failed in a specific day for a specific weather station, or (b) certain stations only measure temperatures on specific days of the month, or (c) the measurement fails if the temperature is too high or too low. Knowing which of these applies can change how we approach this missing data. As you can see, how to treat missing data depends highly on how the data was obtained, and the more you know about a dataset, the better decision you can make. In general, the central question with missing data is: should we remove observations with missing values, or should we impute missing values? In fact, can we do anything with a dataset that is missing data at all? The answers to these require us to think about why the data is missing. 21.1 Mechanisms of missing data For this discussion let’s assume we have an attribute \\(y\\) that contains missing data, a binary attribute \\(r\\) that encodes if observation in \\(y\\) is missing, and other attributes \\(x\\) in our dataset. Also, we will make statements like depend or not depend, e.g., value of \\(r_i\\) does not depend on value of \\(y_i\\). For now, until we formalize this concept further, you can take this to mean the: properties of the distribution of \\(r\\) do not change based on values of \\(y\\). Data missing completely at random (MCAR): missingness does not depend on any values of the missing or measured data. That is missingness \\(r_i\\) does not depend on the (unobserved) value \\(y_i\\) or on observed values \\(x_i\\). In this case, entities with missing data can be removed from the analysis safely. Imputation can be performed, see more below. In our weather example, this would be case (a): stations failed for no discernible reason. Data missing at random (MAR): missingness \\(r_i\\) does not depend on value of \\(y_i\\), but may depend on the value of \\(x_i\\). Here, removing data can bias analysis since you would drop values of \\(x\\) based on missingness and potentially change the distribution of \\(x\\). Imputation can be done as well, see more below. In our weather example, this would be case (b): measurements are not taken on specific days of the month (where “day of the month” serves the role of \\(x\\)). Data not missing at random (NMAR): missingness \\(r_i\\) depends on \\(y_i\\). This is the most pernicious of all, and usually means that we want to go back to our collaborator and tell them that we are in a bind. Removing or imputing data as discussed below is not appropriate in this case, and appropriate methods to deal with it are beyond the scope of this discussion. This is a good resource: https://www.wiley.com/en-us/Statistical+Data+Cleaning+with+Applications+in+R-p-9781118897157 (Ch. 10). In our weather example this would be case (c): measurements fail when the temperature is too hot or cold. So in general, the first step when dealing with missing data is to understand why and how data may be missing. I.e., talk to collaborator, or person who created the dataset. 21.2 Handling missing data 21.2.1 Removing missing data Once you know that data is MCAR and a relatively small fraction of observations have missing values, then it may be safe to remove observations. tidy_weather_nomissing &lt;- tidy_weather %&gt;% tidyr::drop_na(tmax, tmin) tidy_weather_nomissing ## # A tibble: 33 x 6 ## id year month day tmax tmin ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MX17004 2010 1 d30 27.8 14.5 ## 2 MX17004 2010 2 d11 29.7 13.4 ## 3 MX17004 2010 2 d2 27.3 14.4 ## 4 MX17004 2010 2 d23 29.9 10.7 ## 5 MX17004 2010 2 d3 24.1 14.4 ## 6 MX17004 2010 3 d10 34.5 16.8 ## 7 MX17004 2010 3 d16 31.1 17.6 ## 8 MX17004 2010 3 d5 32.1 14.2 ## 9 MX17004 2010 4 d27 36.3 16.7 ## 10 MX17004 2010 5 d27 33.2 18.2 ## # … with 23 more rows 21.2.2 Encoding as missing In the MCAR or MAR case for categorical attributes \\(y\\), a useful approach is to encode the fact that a value is missing as a new category and include that in subsequent analysis of attribute \\(y\\). tb &lt;- read_csv(file.path(&quot;data&quot;, &quot;tb.csv&quot;)) tidy_tb &lt;- tb %&gt;% gather(demo, n, -iso2, -year) %&gt;% separate(demo, c(&quot;sex&quot;, &quot;age&quot;), sep=1) tidy_tb %&gt;% tidyr::replace_na(list(iso2=&quot;missing&quot;)) ## # A tibble: 115,380 x 5 ## iso2 year sex age n ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 AD 1989 m 04 NA ## 2 AD 1990 m 04 NA ## 3 AD 1991 m 04 NA ## 4 AD 1992 m 04 NA ## 5 AD 1993 m 04 NA ## 6 AD 1994 m 04 NA ## 7 AD 1996 m 04 NA ## 8 AD 1997 m 04 NA ## 9 AD 1998 m 04 NA ## 10 AD 1999 m 04 NA ## # … with 115,370 more rows 21.2.3 Imputation 21.2.3.1 MCAR (also for MAR, but this is not ideal) In this case we can use a simple method for imputation of \\(y\\). For numeric attributes we replace missing values in \\(y\\) with the mean of non-missing values of \\(y\\). flights %&gt;% tidyr::replace_na(list(dep_delay=mean(.$dep_delay, na.rm=TRUE))) ## # A tibble: 336,776 x 19 ## year month day dep_time sched_dep_time dep_delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # … with 336,766 more rows, and 13 more variables: ## # arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, ## # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt; For categorical attributes \\(y\\), we replace missing values with the most common category in the non-missing values of \\(y\\). 21.2.3.2 MAR In this case we use a more complex method by replacing missing values for attribute \\(y\\) predicting from other variables \\(x\\) when variables are related (we will see linear regression using the lm and predict functions later on) dep_delay_fit &lt;- flights %&gt;% lm(dep_delay~origin, data=.) # use average delay conditioned on origin airport flights %&gt;% modelr::add_predictions(dep_delay_fit, var=&quot;pred_delay&quot;) %&gt;% mutate(dep_delay_fixed = ifelse(!is.na(dep_delay), dep_delay, pred_delay)) %&gt;% select(origin, dest, dep_delay, dep_delay_fixed) %&gt;% filter(is.na(dep_delay)) ## # A tibble: 8,255 x 4 ## origin dest dep_delay dep_delay_fixed ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 EWR RDU NA 15.1 ## 2 LGA DFW NA 10.3 ## 3 LGA MIA NA 10.3 ## 4 JFK FLL NA 12.1 ## 5 EWR CVG NA 15.1 ## 6 EWR PIT NA 15.1 ## 7 EWR MHT NA 15.1 ## 8 EWR ATL NA 15.1 ## 9 EWR IND NA 15.1 ## 10 JFK LAX NA 12.1 ## # … with 8,245 more rows For categorical attributes we use a different kind of regression more appropriate to categorical attributes (logistic regression, again we will see that later on). For both imputation methods, a common approach is to add an additional indicator variable stating if numeric missing value was imputed flights %&gt;% mutate(dep_delay_missing = is.na(dep_delay)) ## # A tibble: 336,776 x 20 ## year month day dep_time sched_dep_time dep_delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # … with 336,766 more rows, and 14 more variables: ## # arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, ## # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt;, dep_delay_missing &lt;lgl&gt; 21.3 Implications of imputation Imputation has some effects that can impact analysis. The central tendency of data is retained. For example, if we impute missing data using the mean of a numeric variable, the mean after imputation will not change. This is a good reason to impute based on estimates of central tendency. The spread of the data will change. After imputation, the spread of the data will be smaller relative to spread if we ignore missing values. This could be problematic as underestimating the spread of data can yield over-confident inferences in downstream analysis. We will not address these issues directly in later chapters, but you should be aware of this. "]
]
