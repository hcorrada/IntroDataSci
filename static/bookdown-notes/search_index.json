[
["index.html", "Lecture Notes: Introduction to Data Science 1 Preamble", " Lecture Notes: Introduction to Data Science CMSC320, University of Maryland, College Park Héctor Corrada Bravo 2018-01-28 1 Preamble These are lecture notes for CMSC320, Introduction to Data Science at the University of Maryland, College Park. Refer to the Course Web Page for further information. "],
["introduction-and-overview.html", "2 Introduction and Overview 2.1 What is Data Science? 2.2 Why Data Science? 2.3 Data Science in Society 2.4 Course Organization 2.5 General Workflow", " 2 Introduction and Overview 2.1 What is Data Science? Data science encapsulates the interdisciplinary activities required to create data-centric artifacts and applications that address specific scientific, socio-political, business, or other questions. Let’s look at the constiuent parts of this statement: 2.1.1 Data Measureable units of information gathered or captured from activity of people, places and things. 2.1.2 Specific Questions Seeking to understand a phenomenon, natural, social or other, can we formulate specific questions for which an answer posed in terms of patterns observed, tested and or modeled in data is appropriate. 2.1.3 Interdisciplinary Activities Formulating a question, assessing the appropriateness of the data and findings used to find an answer require understanding of the specific subject area. Deciding on the appropriateness of models and inferences made from models based on the data at hand requires understanding of statistical and computational methods. 2.1.4 Data-Centric Artifacts and Applications Answers to questions derived from data are usually shared and published in meaningful, succinct but sufficient, reproducible artifacts (papers, books, movies, comics). Going a step further, interactive applications that let others explore data, models and inferences are great. 2.2 Why Data Science? The granularity, size and accessibility data, comprising both physical, social, commercial and political spheres has exploded in the last decade or more. “I keep saying that the sexy job in the next 10 years will be statisticians” Hal Varian, Chief Economist at Google (http://www.nytimes.com/2009/08/06/technology/06stats.html?_r=0) “The ability to take data—to be able to understand it, to process it, to extract value from it, to visualize it, to communicate it—that’s going to be a hugely important skill in the next decades, not only at the professional level but even at the educational level for elementary school kids, for high school kids, for college kids.” “Because now we really do have essentially free and ubiquitous data. So the complimentary scarce factor is the ability to understand that data and extract value from it.” Hal Varian (http://www.mckinsey.com/insights/innovation/hal_varian_on_how_the_web_challenges_managers) 2.3 Data Science in Society Because of the large amount of data produced across many spheres of human social and creative activity, many societal questions may be addressed by establishing patterns in data. In the humanities, this can range from unproblematic quesitions of how to dissect a large creative corpora, say music, literature, based on raw characteristics of those works, text, sound and image. To more problematic questions, of analysis of intent, understanding, appreciation and valuation of these creative corpora. In the social sciences, issues of fairness and transparency in the current era of big data are especially problematic. Is data collected representative of population for which inferences are drawn? Are methods employed learning latent unfair factors from ostensibly fair data? These are issues that the research community is now starting to address. In all settings, issues of ethical collection of data, application of models, and deployment of data-centric artifacts are essential to grapple with. Issues of privacy are equally important. 2.4 Course Organization This course will cover basics of how to represent, model and communicate about data and data analyses using the R data analysis environment for Data Science. The course is roughly divided into five areas: Area 0: tools and skills ○ Toolset (Rstudio/tidyverse/rmarkdown) ○ Best practices ○ Debugging data science Area I: types and operations ○ Data tables and data types ○ Operations on tables ○ Basic plotting ○ Tidy data / the ER model ○ Relational Operations ○ SQL ○ Advanced: other data models, db consistency and concurrency Area II: wrangling ○ Data acquisition (load and scrape) ○ EDA Vis / grammar of graphics ○ Data cleaning (text, dates) ○ EDA: Summary statistics ○ Data analysis with optimization (derivatives) ○ Data transformations ○ Missing data Area III: modeling ○ Univariate probability and statistics ○ Hypothesis testing ○ Multivariate probablity and statistics (joint and conditional probability, Bayes thm) ○ Data Analysis with geometry (vectors, inner products, gradients and matrices) ○ Linear regression ○ Logistic regression ○ Gradient descent (batch and stochastic) ○ Trees and random forests ○ K-NN ○ Naïve Bayes ○ Clustering ○ PCA Area IV: essential applications ○ Text mining ○ Graphs ○ Forecasting Area V: communication ○ Designing data visualizations for communication not exploration ○ Interactive visualization ○ Writing about data, analysis, and inferences 2.5 General Workflow The data science activities we will cover are roughly organized into a general workflow that will help us navigate this material. 2.5.1 Defining the Goal What is the question/problem? Who wants to answer/solve it? What do they know/do now? How well can we expect to answer/solve it? How well do they want us to answer/solve it? 2.5.2 Data Collection and Management What data is available? Is it good enough? Is it enough? What are sensible measurements to derive from this data? Units, transformations, rates, ratios, etc. 2.5.3 Modeling What kind of problem is it? E.g., classification, clustering, regression, etc. What kind of model should I use? Do I have enough data for it? Does it really answer the question? 2.5.4 Model Evaluation Did it work? How well? Can I interpret the model? What have I learned? 2.5.5 Presentation Again, what are the measurements that tell the real story? How can I describe and visualize them effectively? 2.5.6 Deployment Where will it be hosted? Who will use it? Who will maintain it? "],
["an-illustrative-analysis.html", "3 An Illustrative Analysis 3.1 Gathering data 3.2 Manipulating the data 3.3 Visualizing the data 3.4 Modeling data 3.5 Visualizing model result 3.6 Abstracting the analysis 3.7 Making analyses accessible 3.8 Summary", " 3 An Illustrative Analysis http://fivethirtyeight.com has a clever series of articles on the types of movies different actors make in their careers: https://fivethirtyeight.com/tag/hollywood-taxonomy/ I’d like to do a similar analysis. Let’s do this in order: Let’s do this analysis for Diego Luna Let’s use a clustering algorithm to determine the different types of movies they make Then, let’s write an application that performs this analysis for any actor and test it with Gael García Bernal Let’s make the application interactive so that a user can change the actor and the number of movie clusters the method learns. For now, we will go step by step through this analysis without showing how we perform this analysis using R. As the course progresses, we will learn how to carry out these steps. 3.1 Gathering data 3.1.1 Movie ratings For this analysis we need to get the movies Diego Luna was in, along with their Rotten Tomatoes ratings. For that we scrape this webpage: https://www.rottentomatoes.com/celebrity/diego_luna. Once we scrape the data from the Rotten Tomatoes website and clean it up, this is part of what we have so far: RATING TITLE CREDIT BOX OFFICE YEAR 5 Flatliners Ray $16.9M 2017 85 Rogue One: A Star Wars Story Captain Cassian Andor $532.2M 2016 88 Blood Father Jonah — 2016 82 The Book of Life Manolo — 2014 100 I Stay with You (Me quedo contigo) Actor — 2014 67 Elysium Julio $90.8M 2013 41 Casa de mi padre Raul $5.9M 2012 This data includes, for each of the movies Diego Luna has acted in, the rotten tomatoes rating, the movie title, Diego Luna’s role in the movie, the U.S. domestic gross and the year of release. 3.1.2 Movie budgets and revenue For the movie budgets and revenue data we scrape this webpage: http://www.the-numbers.com/movie/budgets/all (Note 01.2018: after the initial version of this analysis, this website added pagination to this URL. We will be using the CSV file scraped originally in Summer 2017 for this analysis and leave the issue of dealing with pagination as an exercise.) ## Parsed with column specification: ## cols( ## release_date = col_date(format = &quot;&quot;), ## movie = col_character(), ## production_budget = col_double(), ## domestic_gross = col_double(), ## worldwide_gross = col_double() ## ) This is part of what we have for that table after loading and cleaning up: release_date movie production_budget domestic_gross worldwide_gross 2009-12-18 Avatar 425 760.50762 2783.9190 2015-12-18 Star Wars Ep. VII: The Force Awakens 306 936.66223 2058.6622 2007-05-24 Pirates of the Caribbean: At World’s End 300 309.42043 963.4204 2015-11-06 Spectre 300 200.07417 879.6209 2012-07-20 The Dark Knight Rises 275 448.13910 1084.4391 2013-07-02 The Lone Ranger 275 89.30212 260.0021 2012-03-09 John Carter 275 73.05868 282.7781 2010-11-24 Tangled 260 200.82194 586.5819 2007-05-04 Spider-Man 3 258 336.53030 890.8753 2015-05-01 Avengers: Age of Ultron 250 459.00587 1404.7059 This data is for 5358 movies, including its release date, title, production budget and total gross revenue. The latter two are in millions of U.S. dollars. One thing we might want to check is if the budget and gross entries in this table are inflation adjusted or not. To do this, we can make a plot of domestic gross, which we are using for the subsequent analyses. ## Loading required package: methods ## ## Attaching package: &#39;lubridate&#39; ## The following object is masked from &#39;package:base&#39;: ## ## date Although we don’t know for sure, since the source of our data does not state this specifically, it looks like the domestic gross measurement is not inflation adjusted since gross increases over time. 3.2 Manipulating the data Next, we combine the datasets we obtained to get closer to the data we need to make the plot we want. We combine the two datasets using the movie title, so that the end result has the information in both tables for each movie. RATING TITLE CREDIT BOX OFFICE YEAR release_date production_budget domestic_gross worldwide_gross 5 Flatliners Ray $16.9M 2017 1990-08-10 26.0 61.30815 61.30815 85 Rogue One: A Star Wars Story Captain Cassian Andor $532.2M 2016 2016-12-16 200.0 532.17732 1050.98849 82 The Book of Life Manolo — 2014 2014-10-17 50.0 50.15154 97.65154 67 Elysium Julio $90.8M 2013 2013-08-09 120.0 93.05012 286.19209 51 Contraband Gonzalo $66.5M 2012 2012-01-13 25.0 66.52800 98.40685 94 Milk Jack Lira $31.8M 2008 2008-11-26 20.0 31.84130 57.29337 69 Criminal Rodrigo $0.8M 2004 2016-04-15 31.5 14.70870 38.77126 60 The Terminal Enrique Cruz $77.1M 2004 2004-06-18 75.0 77.07396 218.67396 80 Open Range Button $58.3M 2003 2003-08-15 26.0 58.33125 68.61399 76 Frida Alejandro Gomez $25.7M 2002 2002-10-25 12.0 25.88500 56.13124 3.3 Visualizing the data Now that we have the data we need, we can make a plot: Figure 3.1: Ratings and U.S. Domestic Gross of Diego Luna’s movies. We see that there is one clear outlier in Diego Luna’s movies, which probably is the one Star Wars movie he acted in. The remaining movies could potentially be grouped into two types of movies, those with higher rating and those with lower ratings. 3.4 Modeling data We can use a clustering algorithm to partition Diego Luna’s movies. We can use the data we obtained so far and see if the k-means clustering algorithm partitions these movies into three sensible groups using the movie’s rating and domestic gross. Let’s see how the movies are grouped: TITLE RATING domestic_gross cluster The Book of Life 82 50.15154 1 Milk 94 31.84130 1 Criminal 69 14.70870 1 Open Range 80 58.33125 1 Frida 76 25.88500 1 Rogue One: A Star Wars Story 85 532.17732 2 Flatliners 5 61.30815 3 Elysium 67 93.05012 3 Contraband 51 66.52800 3 The Terminal 60 77.07396 3 3.5 Visualizing model result Let’s remake the same plot as before, but use color to indicate each movie’s cluster assignment given by the k-means algorithm. The algorithm did make the Star Wars movie it’s own group since it’s so different that the other movies. The grouping of the remaining movies is not as clean. To make the plot and clustering more interpretable, let’s annotate the graph with some movie titles. In the k-means algorithm, each group of movies is represented by an average rating and an average domestic gross. What we can do is find the movie in each group that is closest to the average and use that movie title to annotate each group in the plot. Roughly, movies are clustered into Star Wars and low vs. high rated movies. The latter seem to have some difference in domestic gross. For example, movies like “The Terminal” have lower rating but make slightly more money than movies like “Frida”. We could use statistical modeling to see if that’s the case, but will skip that for now. Do note also, that the clustering algorithm we used seems to be assigning one of the movies incorrectly, which warrants further investigation. 3.6 Abstracting the analysis While not a tremendous success, we decide we want to carry on with this analysis. We would like to do this for other actors’ movies. One of the big advantages of using R is that we can write a piece of code that takes an actor’s name as input, and reproduces the steps of this analysis for that actor. We call these functions, we’ll see them and use them a lot in this course. For our analysis, this function must do the following: Scrape movie ratings from Rotten Tomatoes Clean up the scraped data Join with the budget data we downloaded previously Perform the clustering algorithm Make the final plot With this in mind, we can write functions for each of these steps, and then make one final function that puts all of these together. For instance, let’s write the scraping function. It will take an actor’s name and output the scraped data. Let’s test it with Gael García Bernal: RATING TITLE CREDIT BOX OFFICE YEAR No Score Yet Viva - A vida é uma festa Hector — 2017 97% Coco Hector $192M 2017 31% Salt and Fire Dr. Fabio Cavani — 2017 Good start. We can then write functions for each of the steps we did with Diego Luna before. Then put all of these steps into one function that calls our new functions to put all of our analysis together: We can test this with Gael García Bernal analyze_actor(&quot;Gael Garcia Bernal&quot;) 3.7 Making analyses accessible Now that we have written a function to analyze an actor’s movies, we can make these analyses easier to produce by creating an interactive application that wraps our new function. The shiny R package makes creating this type of application easy. 3.8 Summary In this analysis we saw examples of the common steps and operations in a data analysis: Data ingestion: we scraped and cleaned data from publicly accessible sites Data manipulation: we integrated data from multiple sources to prepare our analysis Data visualization: we made plots to explore patterns in our data Data modeling: we made a model to capture the grouping patterns in data automatically, using visualization to explore the results of this modeling Publishing: we abstracted our analysis into an application that allows us and others to perform this analysis over more datasets and explore the result of modeling using a variety of parameters "],
["setting-up-the-r-data-science-toolbox.html", "4 Setting up the R Data Science Toolbox 4.1 Some history 4.2 Setting up R 4.3 Setting up Rstudio 4.4 A first look at Rstudio 4.5 R packages 4.6 Additional R resources 4.7 Literate Programming 4.8 Finishing your setup", " 4 Setting up the R Data Science Toolbox Here we setup R, RStudio and anything else we will use in the course. 4.1 Some history R is an offspring of S, a language created in AT&amp;T Labs by John Chambers (now at Stanford) and others in 1976 with the goal of creating an environment for statistical computing and data analysis. The standard for the language in current use was settled in 1998. That same year, “S” won the ACM Software System award, awarded to software systems “that have a lasting influence, reflected in contributions to concepts, in commercial acceptance, or both”. In 1991, Robert Gentleman and Ross Ihaka created R to provide an open source implementation of the S language and environment. They also redesigned the language to enforce lexical scoping rules. It has been maintained by the R core group since 1997, and in 2015 an R consortium, including Microsoft, Google, and others, was created. Along with Python it is one of the most popular environments for data analysis (e.g., figure below from KDNuggets 2017 software survey We use R for this class because we find that besides it being a state-of-the-art data analysis environment, it provides a clean end-to-end platform for teaching material across the data management-modeling-communication spectrum that we study in class. However, be aware that as you move on in the Data Science field you most likely will need to add Python to your toolbelt. 4.2 Setting up R R is a free, open source, environment for data analysis. It is available as a free binary download for Mac, Linux and Windows. For the more adventorous, it can also be compiled from source. To install R in your computer go to https://cran.r-project.org/index.html and download and install the appropriate binary file. This will install the base R system: the R programming language, a few packages for common data analyses and a development environment. 4.3 Setting up Rstudio We will actually use Rstudio to interact with R. Rstudio is a very powerful application to make data analysis with R easier to do. To install go to https://www.rstudio.com/products/rstudio/download/ and download the appropriate version of Rstudio. 4.4 A first look at Rstudio Let’s take a first look at Rstudio. The first thing you will notice is that Rstudio is divided into panes. Let’s take a look first at the Console. 4.4.1 Interactive Console The most immediate way to interact with R is through the interactive console. Here we can write R instructions to perform our data analyses. We want to start using data so the first instructions we will look at deal with loading data. When you installed R, a few illustrative datasets were installed as well. Let’s take a look at the list of datasets you now have access to. Write the following command in the console This will list names and descriptions of datasets available in your R installation. Let’s try to find out more information about these datasets. In R, the first attempt to get help with something is to use the ? operation. So, to get help about the swiss dataset we can enter the following in the console This will make the documentation for the swiss dataset open in another pane. On your own: Find more information about a different dataset using the ? operator. 4.4.2 Data Viewer According to the documentation we just saw for swiss, this is a data.frame with 47 observations and 6 variables. The data.frame is the basic structure we will use to represent data throughout the course. We will see this again repeatedly, and use a couple of other names (e.g., tibble) to refer to this. Intuitively, you can think of the data.frame like a spreadsheet, with rows representing observations, and columns representing variables that describe those observations. Let’s see what the swiss data looks like using the Rstudio data viewer. The Data Viewer lets you reorder data by the values in a column. It also lets you filter rows of the data by values as well. On your own: Use the Data Viewer to explore another of the datasets you saw listed before. 4.4.3 Names, values and functions Let’s make a very short pause to talk about something you may have noticed. In the console, we’ve now written a few instructions, e.g. View(swiss). Let’s take a closer look at how these instructions are put together. expressions: first of all, we call these instructions expressions, which are just text that R can evaluate into a value. View(swiss) is an expression. values: so, what’s a value? They are numbers, strings, data frames, etc. This is the data we will be working with. The number 2 is a value. So is the string &quot;Hector&quot;. So, what value is produced when R evaluates the expression View(swiss)? Nothing, which we also treat as a value. That wasn’t very interesting, but it does have a side effect: it shows the swiss dataset in the Data viewer. How about a simpler expression: swiss, what value is produced when R evaluates the expression swiss? The data.frame containing that data. Try it out in the console. names: so if swiss isn’t a value, what is it? It is a name. We use these to refer to values. So, when we write the expression swiss, we tell R we want the value referenced by the name swiss, that is, the data itself! functions: Besides numbers, strings, data frames, etc. another important type of value is the function. Functions are a series of instructions that take some input value and produce a different value. The name View refers to the function that takes a data frame as input, and displays it in the Data viewer. Functions are called using the parentheses we saw before: View(swiss), the parentheses say that you are passing input swiss to the function View. We’ll see later how we can write our own functions. 4.4.4 Plotting Next, I want to show the Plots pane in Rstudio. Let’s make a plot using the swiss dataset: It’s not pretty, but it was very easy to produce. There’s a couple of things going on here… plot is a function, it takes two inputs, the data to put in the x and y axes, evaluates to nothing, but creates a plot of the data swiss$Education is how we refer to the Education column in the swiss data frame. On your own: Make a plot using other variables in the swiss dataset. 4.4.5 Editor So far, we’ve made some good progress: we know how to write expressions on the R console so that they are evaluated, we are starting to get a basic understanding of how these expressions are constructed, we can use the Data viewer to explore data frames, and made one plot that was displayed in the Plots pane. To finish this quick tour, I want to look at two more Rstudio panes: the file editor, and the File viewer. As you have noticed, everytime we want to evaluate an expression on the console, we have to write it in. For example, if we want to change the plot we made above to include a different variable, we have to write the whole thing again. Also, what if I forgot what expression I used to make a specific plot? Even better, what if I wanted somebody else to make the plot I just made? By far, one of the biggest advantages of using R over Excel or other similar programs, is that we can write expressions in scripts that are easy to share with others, making analyses easier to reproduce. Let’s write a script that we can use to make the same plot we just made. In the Rstudio menu select File&gt;New File&gt;R Script This will open a tab in the File editor in which we can write expressions: We can then evaluate the expressions in the file one at a time, or all at the same time. We can then save these expressions in a script. In the Rstudio menu select File&gt;Save and save as a text file. The convention is to use the .R or .r file extension, e.g., swiss_plot.r. On your own: Add expressions for additional plots to the script and save again. Run the new expressions. 4.4.6 Files viewer Rstudio includes a Files viewer that you can use to find and load files. You can find the Files near the Plots viewer 4.5 R packages Another of R’s advantages for data analysis is that it has attracted a large number of extremely useful additions provided by users worldwide. These are housed in CRAN. In this course we will make a lot of use of a set of packages bundled together into the tidyverse by Hadley Wickham and others. These packages make preparing, modeling and visualizing certain kinds data (which covers the vast majority of use cases) quite fun and pleasent. There is a webpage for the general tidyverse project: http://tidyverse.org, which includes pages for each of the packages included there. Let’s install the tidyverse into your R environment. There are two ways of installing packages. In the console, you can use the expression: In Rstudio, you can use the Packages tab: On your own: Install the following additional packages which we will use later on: rvest, stringr, nycflights13 and broom. 4.6 Additional R resources Resources for learning and reading about R are listed in our here. Of note are the swirl project and DataCamp’s [introduction to R] course. 4.7 Literate Programming One last note before we get started. R has great support for literate programming, where source code that contains both code, the result of evaluating that code, and text explaining that code co-exist in a single document. This is extremely valuable in data analysis, as many choices made by data analysts are worth explaning in text, and interpretation of the results of analyses can co-exist with the computations used in that analysis. This document you are reading contains both text and code. In class, we will use Rmarkdown for this purpose. 4.8 Finishing your setup Complete your exit ticket as instructed. "],
["measurements-and-data-types.html", "5 Measurements and Data Types 5.1 A data analysis to get us going 5.2 Getting data 5.3 Entities and attributes 5.4 Categorical attributes 5.5 Discrete numeric attributes 5.6 Continuous numeric data 5.7 Other examples 5.8 Other important datatypes 5.9 Units", " 5 Measurements and Data Types Now that we have our tools ready, let’s start doing some analysis. First, let’s go over some principles of R as a data analysis environment. R is a computational environment for data analysis. It is designed around a functional language, as opposed to procedural languages like Java or C, that has desirable properties for the type of operations and workflows that are frequently performed in the course of analyzing datasets. In this exercise we will start learning some of those desirable properties while performing an analysis of a real dataset. 5.1 A data analysis to get us going I’m going to do an analysis of Baltimore crime to guide our discussion of R. We’ll use data downloaded from Baltimore City’s awesome open data site (this was downloaded a couple of years ago so if you download now, you will get different results). The repository for this particular data is here. https://data.baltimorecity.gov/Crime/BPD-Arrests/3i3v-ibrt 5.2 Getting data We’ve prepared the data previously into a comma-separated value file (.csv file): each line contains attribute values (separated by commas) describing arrests in the City of Baltimore. The read_csv command is part of the readr R package and allows you to read a dataset stored in a csv file. This function is extremely versatile, and you can read more about it by using the standard help system in R: ?read_csv. The result of running calling this function is the data itself, so, by running the function in the console, the result of the function is printed. To make use of this dataset we want to assign the result of calling read_csv (i.e., the dataset) to a variable: library(tidyverse) arrest_tab &lt;- read_csv(&quot;data/BPD_Arrests.csv&quot;) arrest_tab ## # A tibble: 104,528 x 15 ## arrest age race sex arrestDate arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 11126858 23 B M 01/01/2011 00&#39;00&quot; &lt;NA&gt; ## 2 11127013 37 B M 01/01/2011 01&#39;00&quot; 2000 Wilkens Ave ## 3 11126887 46 B M 01/01/2011 01&#39;00&quot; 2800 Mayfield Ave ## 4 11126873 50 B M 01/01/2011 04&#39;00&quot; 2100 Ashburton St ## 5 11126968 33 B M 01/01/2011 05&#39;00&quot; 4000 Wilsby Ave ## 6 11127041 41 B M 01/01/2011 05&#39;00&quot; 2900 Spellman Rd ## 7 11126932 29 B M 01/01/2011 05&#39;00&quot; 800 N Monroe St ## 8 11126940 20 W M 01/01/2011 05&#39;00&quot; 5200 Moravia Rd ## 9 11127051 24 B M 01/01/2011 07&#39;00&quot; 2400 Gainsdbourgh Ct ## 10 11127018 53 B M 01/01/2011 15&#39;00&quot; 3300 Woodland Ave ## # ... with 104,518 more rows, and 8 more variables: incidentOffense &lt;chr&gt;, ## # incidentLocation &lt;chr&gt;, charge &lt;chr&gt;, chargeDescription &lt;chr&gt;, ## # district &lt;chr&gt;, post &lt;int&gt;, neighborhood &lt;chr&gt;, `Location 1` &lt;chr&gt; Now we can ask what type of value is stored in the arrest_tab variable: class(arrest_tab) ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; The data.frame is a workhorse data structure in R. It encapsulates the idea of entities (in rows) and attribute values (in columns). We call these rectangular datasets. The other types tbl_df and tbl are added by tidyverse for improved functionality. We can ask other features of this dataset: # This is a comment in R, by the way # How many rows (entities) does this dataset contain? nrow(arrest_tab) ## [1] 104528 # How many columns (attributes)? ncol(arrest_tab) ## [1] 15 # What are the names of those columns? colnames(arrest_tab) ## [1] &quot;arrest&quot; &quot;age&quot; &quot;race&quot; ## [4] &quot;sex&quot; &quot;arrestDate&quot; &quot;arrestTime&quot; ## [7] &quot;arrestLocation&quot; &quot;incidentOffense&quot; &quot;incidentLocation&quot; ## [10] &quot;charge&quot; &quot;chargeDescription&quot; &quot;district&quot; ## [13] &quot;post&quot; &quot;neighborhood&quot; &quot;Location 1&quot; Now, in Rstudio you can view the data frame using View(arrest_tab). 5.2.1 Names, values and functions Let’s review the concepts of names values and functions again. In the console, we’ve now written a few instructions, e.g. View(arrest_tab). Let’s take a closer look at how these instructions are put together. expressions: first of all, we call these instructions expressions, which are just text that R can evaluate into a value. View(arrest_tab) is an expression. values: so, what’s a value? They are numbers, strings, data frames, etc. This is the data we will be working with. The number 2 is a value. So is the string &quot;Hector&quot;. So, what value is produced when R evaluates the expression View(arrest_tab)? Nothing, which we also treat as a value. That wasn’t very interesting, but it does have a side effect: it shows the arrest_tab dataset in the Data viewer. How about a simpler expression: arrest_tab, what value is produced when R evaluates the expression arrest_tab? The data.frame containing that data. Try it out in the console. names: so if arrest_tab isn’t a value, what is it? It is a name. We use these to refer to values. So, when we write the expression arrest_tab, we tell R we want the value referenced by the name arrest_tab, that is, the data itself! functions: Besides numbers, strings, data frames, etc. another important type of value is the function. Functions are a series of instructions that take some input value and produce a different value. The name View refers to the function that takes a data frame as input, and displays it in the Data viewer. Functions are called using the parentheses we saw before: View(arrest_tab), the parentheses say that you are passing input arrest_tab to the function View. We’ll see later how we can write our own functions. 5.3 Entities and attributes As a reminder, we are using the term entities to refer to the objects to which data in a dataset refers to. For instance, in our example dataset, each arrest is an entity. In a rectangular dataset (a data frame) this corresponds to rows in a table. We then say that a dataset contains attributes for each entity. For instance, attributes of each arrest would be the person’s age, the type of offense, the location, etc. In a rectangular dataset, this corresponds to the columns in a table. This language of entities and attributes is commonly used in the database literature. In statistics you may see experimental units or samples for entities and covariates for attributes. In other instances observations for entities and variables for attributes. In Machine Learning you may see example for entities and features for attributes. For the most part, all of these are exchangable. This table summarizes the terminology: Field Entities Attributes Databases Entities Attributes Machine Learning Examples Features Statistics Observations/Samples Variables/Covariates This chapter is concerned with the types of data we may encounter as attributes in data analyses. 5.4 Categorical attributes A categorical attribute for a given entity can take only one of a finite set of examples. For example, the sex variable can only have value M, F, or `` (we’ll talk about missing data later in the semester). table(arrest_tab$sex) ## ## F M ## 19431 85095 The result of a coin flip is categorical: heads or tails. The outcome of rolling an 8-sided die is categorical: one, two, …, eight. Can you think of other examples? 5.4.1 Factors in R We said that R is designed for data analysis. My favorite example of how that manifests itself is the factor datatype. If you look at your dataset now, arrest_tab$sex is a vector of strings: class(arrest_tab$sex) ## [1] &quot;character&quot; summary(arrest_tab$sex) ## Length Class Mode ## 104528 character character However, as a measurement, or attribute, it should only take one of two values (or three depending on how you record missing, unknown or unspecified). So, in R, that categorical data type is called a factor. Notice what the summary function does after turning the sex attribute into a factor: arrest_tab$sex &lt;- factor(arrest_tab$sex) summary(arrest_tab$sex) ## F M NA&#39;s ## 19431 85095 2 This distinction shows up in many other places where functions have different behavior when called on different types of values. The possible values a factor can take are called levels: levels(arrest_tab$sex) ## [1] &quot;F&quot; &quot;M&quot; Exercise: you should transform the race attribute into a factor as well. How many levels does it have? 5.5 Discrete numeric attributes These are attributes that can take specific values from elements of ordered, discrete (possibly infinite) sets. The most common set in this case would be the non-negative positive integers. This data is commonly the result of counting processes. In our example dataset, age, measured in years, is a discrete attribute. Frequently, we obtain datasets as the result of summarizing, or aggregating other underlying data. In our case, we could construct a new dataset containing the number of arrests per neighborhood (we will see how to do this later) ## # A tibble: 6 x 2 ## neighborhood number_of_arrests ## &lt;chr&gt; &lt;int&gt; ## 1 Abell 62 ## 2 Allendale 297 ## 3 Arcadia 78 ## 4 Arlington 694 ## 5 Armistead Gardens 153 ## 6 Ashburton 78 In this new dataset, the entities are each neighborhood, the number_of_arrests attribute is a discrete numeric attribute. Other examples: the number of students in a class is discrete, the number of friends for a specific Facebook user. Can you think of other examples? Distinctions between categorical and discrete numerical data is that categorical data is not ordered and finite, discrete numeric data is (possibly) infinite and ordered. 5.6 Continuous numeric data These are attributes that can take any value in a continuous set. For example, a person’s height, in say inches, can take any number (within the range of human heights). Here is another dataset we can use to look at this datatype. In this case, entities are cars and we look at continuous numeric attributes speed and stopping distance: The distinction between continuous and discrete is a bit tricky since measurements that have finite precision are, in a sense, discrete. Remember, however, that continuity is not a property of the specific dataset you have in hand, but rather of the process you are measuring. The number of arrests in a neighborhood cannot, in principle, be fractional, regardless of the precision at which we measure this. If we had the appropriate tool, we could measure a person’s height with infinite precision. This distinction is very important when we build statistical models of datasets for analysis. For now, think of discrete data as the result of counting, and continuous data the result of some physical measurement. 5.7 Other examples Consider a dataset of images like the super-famous MNIST dataset of handwritten digits. This dataset contains images of handwritten digits. So each image is an entity. Each image has a label attribute which states which of the digits 0,1,…9 is represented by the image. What type of data is this (categorical, continuous numeric, or discrete numeric)? Now, each image is represented by grayscale values in a 28x28 grid. That’s 784 attributes, one for each square in the grid, containing a grayscale value. Now what type of data are these other 784 attributes? 5.8 Other important datatypes The three datatypes we saw above encompass a fairly large swath of data you will come across. Our arrest dataset contains other important datatypes that we will run across frequently: Datetime: Date and time of some event or observation (e.g., arrestDate, arrestTime) Geolocation: Latitude and Longitude of some event or observation (e.g., Location.) 5.9 Units Something that we tend to forget but is extremely important for the modeling and interpretation of data is that attributes are for the most part measurements and that they have units. For example, age of a person can be measured in different units: years, months, etc. These can be converted to one another, but nonetheless in a given dataset, that attribute or measurement will be recorded in some specific units. Similar arguments go for distances and times, for example. In other cases, we may have unitless measurements (we will see later an example of this when we do dimensionality reduction). In these cases, it is worth thinking about why your measurements are unit-less. When performing analyses that try to summarize the effect of some measurement or attribute on another, units matter a lot! We will see the importance of this in our regression section. For now, make sure you make a mental note of units for each measurement you come across. This will force you to think about where and how your data was obtained, which will become very important when modeling and interpreting the results of these models. "],
["principles-basic-operations.html", "6 Principles: Basic Operations 6.1 Data Frame Operations (1)", " 6 Principles: Basic Operations 6.1 Data Frame Operations (1) Now that we have a data frame describing our data, let’s learn a few fundamental operations we perform on data frames on almost any analysis. We divide these first set of operations into two groups: operations on attributes and operations on entitites. These operations are defined in the dplyr package, part of the tidyverse, and are described in more detail in the “R for Data Science” textbook available in the course logistics page: http://r4ds.had.co.nz/transform.html. 6.1.1 Operations that select attributes 6.1.1.1 select In our data set we have a large number of attributes describing each arrest. Now, suppose we only want to study patterns in these arrests based on a smaller number of attributes for purposes of efficiency, since we would operate over less data, or interpretability. In that case we would like to create a data frame that contains only those attributes of interest. We use the select function for this. Let’s create a data frame containing only the age, sex and district attributes select(arrest_tab, age, sex, district) ## # A tibble: 104,528 x 3 ## age sex district ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 23 M &lt;NA&gt; ## 2 37 M SOUTHERN ## 3 46 M NORTHEASTERN ## 4 50 M WESTERN ## 5 33 M NORTHERN ## 6 41 M SOUTHERN ## 7 29 M WESTERN ## 8 20 M NORTHEASTERN ## 9 24 M &lt;NA&gt; ## 10 53 M NORTHWESTERN ## # ... with 104,518 more rows The first argument to the select function is the data frame we want to operate on, the remaining arguments describe the attributes we want to include in the resulting data frame. Note a few other things: The first argument to select is a data frame, and the value returned by select is also a data frame As always you can learn more about the function using ?select Attribute descriptor arguments can be fairly sophisticated. For example, we can use positive integers to indicate attribute (column) indices: r select(arrest_tab, 1, 3, 4) ## # A tibble: 104,528 x 3 ## arrest race sex ## &lt;int&gt; &lt;chr&gt; &lt;fct&gt; ## 1 11126858 B M ## 2 11127013 B M ## 3 11126887 B M ## 4 11126873 B M ## 5 11126968 B M ## 6 11127041 B M ## 7 11126932 B M ## 8 11126940 W M ## 9 11127051 B M ## 10 11127018 B M ## # ... with 104,518 more rows R includes a useful operator to describe ranges. E.g., 1:5 would be attributes 1 through 5: r select(arrest_tab, 1:5) ## # A tibble: 104,528 x 5 ## arrest age race sex arrestDate ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;fct&gt; &lt;chr&gt; ## 1 11126858 23 B M 01/01/2011 ## 2 11127013 37 B M 01/01/2011 ## 3 11126887 46 B M 01/01/2011 ## 4 11126873 50 B M 01/01/2011 ## 5 11126968 33 B M 01/01/2011 ## 6 11127041 41 B M 01/01/2011 ## 7 11126932 29 B M 01/01/2011 ## 8 11126940 20 W M 01/01/2011 ## 9 11127051 24 B M 01/01/2011 ## 10 11127018 53 B M 01/01/2011 ## # ... with 104,518 more rows We can also use other helper functions to create attribute descriptors. For example, to choose all attributes that begin with the letter a we can the starts_with function which uses partial string matching: r select(arrest_tab, starts_with(&quot;a&quot;)) ## # A tibble: 104,528 x 5 ## arrest age arrestDate arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 11126858 23 01/01/2011 00'00&quot; &lt;NA&gt; ## 2 11127013 37 01/01/2011 01'00&quot; 2000 Wilkens Ave ## 3 11126887 46 01/01/2011 01'00&quot; 2800 Mayfield Ave ## 4 11126873 50 01/01/2011 04'00&quot; 2100 Ashburton St ## 5 11126968 33 01/01/2011 05'00&quot; 4000 Wilsby Ave ## 6 11127041 41 01/01/2011 05'00&quot; 2900 Spellman Rd ## 7 11126932 29 01/01/2011 05'00&quot; 800 N Monroe St ## 8 11126940 20 01/01/2011 05'00&quot; 5200 Moravia Rd ## 9 11127051 24 01/01/2011 07'00&quot; 2400 Gainsdbourgh Ct ## 10 11127018 53 01/01/2011 15'00&quot; 3300 Woodland Ave ## # ... with 104,518 more rows We can also use the attribute descriptor arguments to drop attributes. For instance using descriptor -age returns the arrest data frame with all but the age attribute included: r select(arrest_tab, -age) ## # A tibble: 104,528 x 14 ## arrest race sex arrestDate arrestTime arrestLocation incidentOffense ## &lt;int&gt; &lt;chr&gt; &lt;fct&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1.11e⁷ B M 01/01/2011 00'00&quot; &lt;NA&gt; Unknown Offense ## 2 1.11e⁷ B M 01/01/2011 01'00&quot; 2000 Wilkens … 79-Other ## 3 1.11e⁷ B M 01/01/2011 01'00&quot; 2800 Mayfield… Unknown Offense ## 4 1.11e⁷ B M 01/01/2011 04'00&quot; 2100 Ashburto… 79-Other ## 5 1.11e⁷ B M 01/01/2011 05'00&quot; 4000 Wilsby A… Unknown Offense ## 6 1.11e⁷ B M 01/01/2011 05'00&quot; 2900 Spellman… 81-Recovered P… ## 7 1.11e⁷ B M 01/01/2011 05'00&quot; 800 N Monroe … 79-Other ## 8 1.11e⁷ W M 01/01/2011 05'00&quot; 5200 Moravia … Unknown Offense ## 9 1.11e⁷ B M 01/01/2011 07'00&quot; 2400 Gainsdbo… 54-Armed Person ## 10 1.11e⁷ B M 01/01/2011 15'00&quot; 3300 Woodland… 54-Armed Person ## # ... with 104,518 more rows, and 7 more variables: incidentLocation ## # &lt;chr&gt;, charge &lt;chr&gt;, chargeDescription &lt;chr&gt;, district &lt;chr&gt;, post ## # &lt;int&gt;, neighborhood &lt;chr&gt;, `Location 1` &lt;chr&gt; 6.1.2 rename To improve interpretability during an analysis we may want to rename attributes. We use the rename function for this: r rename(arrest_tab, arrest_date=arrestDate) ## # A tibble: 104,528 x 15 ## arrest age race sex arrest_date arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;fct&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 11126858 23 B M 01/01/2011 00'00&quot; &lt;NA&gt; ## 2 11127013 37 B M 01/01/2011 01'00&quot; 2000 Wilkens Ave ## 3 11126887 46 B M 01/01/2011 01'00&quot; 2800 Mayfield Ave ## 4 11126873 50 B M 01/01/2011 04'00&quot; 2100 Ashburton St ## 5 11126968 33 B M 01/01/2011 05'00&quot; 4000 Wilsby Ave ## 6 11127041 41 B M 01/01/2011 05'00&quot; 2900 Spellman Rd ## 7 11126932 29 B M 01/01/2011 05'00&quot; 800 N Monroe St ## 8 11126940 20 W M 01/01/2011 05'00&quot; 5200 Moravia Rd ## 9 11127051 24 B M 01/01/2011 07'00&quot; 2400 Gainsdbourgh Ct ## 10 11127018 53 B M 01/01/2011 15'00&quot; 3300 Woodland Ave ## # ... with 104,518 more rows, and 8 more variables: incidentOffense &lt;chr&gt;, ## # incidentLocation &lt;chr&gt;, charge &lt;chr&gt;, chargeDescription &lt;chr&gt;, ## # district &lt;chr&gt;, post &lt;int&gt;, neighborhood &lt;chr&gt;, `Location 1` &lt;chr&gt; Like select, the first argument to the function is the data frame we are operating on. The remaining arguemnts specify attributes to rename and the name they will have in the resulting data frame. Note that arguments in this case are named (have the form lhs=rhs). We can have selection and renaming by using named arguments in select: r select(arrest_tab, age, sex, arrest_date=arrestDate) ## # A tibble: 104,528 x 3 ## age sex arrest_date ## &lt;int&gt; &lt;fct&gt; &lt;chr&gt; ## 1 23 M 01/01/2011 ## 2 37 M 01/01/2011 ## 3 46 M 01/01/2011 ## 4 50 M 01/01/2011 ## 5 33 M 01/01/2011 ## 6 41 M 01/01/2011 ## 7 29 M 01/01/2011 ## 8 20 M 01/01/2011 ## 9 24 M 01/01/2011 ## 10 53 M 01/01/2011 ## # ... with 104,518 more rows Also like select, the result of calling rename is a data frame. In fact, this will be the case for almost all operations in the tidyverse they operate on data frames (specified as the first argument in the function call) and return data frames. "]
]
